{"remainingRequest":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\src\\components\\Booking.vue?vue&type=template&id=abfb344e&scoped=true&","dependencies":[{"path":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\src\\components\\Booking.vue","mtime":1597251096791},{"path":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Testing\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}