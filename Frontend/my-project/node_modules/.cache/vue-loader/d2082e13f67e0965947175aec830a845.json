{"remainingRequest":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\src\\components\\Home.vue?vue&type=template&id=8dc7cce2&scoped=true&","dependencies":[{"path":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\src\\components\\Home.vue","mtime":1594196288836},{"path":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\Database Proj\\Final\\Source Code\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}