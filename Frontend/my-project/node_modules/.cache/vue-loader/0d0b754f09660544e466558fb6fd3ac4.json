{"remainingRequest":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\src\\components\\UserHome.vue?vue&type=template&id=45e03b0c&scoped=true&","dependencies":[{"path":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\src\\components\\UserHome.vue","mtime":1591453513445},{"path":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\user\\Desktop\\New folder\\Project\\Frontend\\my-project\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}